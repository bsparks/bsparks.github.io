<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Software-Development on superior code </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://bsparks.github.io/categories/software-development/index.xml/</link>
    <language>en-us</language>
    <author>Ben Sparks</author>
    
    <updated>Sun, 16 May 2010 09:01:44 MST</updated>
    
    <item>
      <title>dotNet 4 New Features</title>
      <link>http://bsparks.github.io/2010/05/16/dotNet-4-New-Features/</link>
      <pubDate>Sun, 16 May 2010 09:01:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2010/05/16/dotNet-4-New-Features/</guid>
      <description>&lt;p&gt;.Net 4 has been out for a couple of weeks now and I have started to delve into the new features. Now we are up to C# version 4 as well, and one of the new features that I find really exciting is Optional and Named Parameters. Being able to use optional parameters in functions is something that is built into C++ and until now has been completely missing from C#. In the past, you basically had to override a function several times in order to give the caller more options for leaving parameters out. I am surprised really that it took this long to get them in C#, but I&amp;rsquo;m glad they are here now! Since overriding functions was the only way to do it in the past, I have to wonder if behind the scenes that is all that Microsoft is doing, generating overrides for functions, perhaps someday I&amp;rsquo;ll look into that. For now let me explain briefly how these work in C# 4.0.&lt;/p&gt;

&lt;p&gt;Much like in C++ optional parameters must come after required parameters in the parameter list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void PrintCustomer(string name, string state, string salutation=&amp;quot;n/a&amp;quot;, string city=&amp;quot;&amp;quot;, int sales=100)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, it&amp;rsquo;s pretty simple. Just create the parameter as usual, but add the default value to it. So now you can call the function with ONLY the name and state parameters if you want to.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;PrintCustomer(&amp;quot;Bob Smith&amp;quot;, &amp;quot;AZ&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty cool! Previously you have had to have 4 different overrides of that function in order to accommodate all 3 of those optional parameter configurations. So just like in C++ you can call the function with or without any of the optional parameters, but in C++ you would have to go through each of them in order, you wouldn&amp;rsquo;t for example be able to define city without defining a value for salutation. This is where Named Parameters come into play. With named parameters you can specify the parameter that you want, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;PrintCustomer(&amp;quot;Bob Smith&amp;quot;, &amp;quot;AZ&amp;quot;, city: &amp;quot;Phoenix&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome! Now we have bypassed the need to have a value for salutation! Also it is good to note that you can use named parameters even for the required parameters. That way you can provide parameters to functions in any order that you want, and provide even greater readability in code. Perhaps you have 2 similarly named parameters like state and salesState, with named parameters it would be easy to understand which is which from the call of the function (though it wouldn&amp;rsquo;t be too often you&amp;rsquo;d be using string literals in your function calls).&lt;/p&gt;

&lt;p&gt;Here is a complete VS2010 console application demonstrating this new functionality:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Net4Tests
{
    class Program
    {
        static void Main(string[] args)
        {
            PrintCustomer(&amp;quot;Tech Co&amp;quot;, &amp;quot;AZ&amp;quot;);
            PrintCustomer(&amp;quot;ABC Engineering&amp;quot;, &amp;quot;CA&amp;quot;, &amp;quot;San Diego&amp;quot;);
            PrintCustomer(&amp;quot;SwizzleSoft&amp;quot;, &amp;quot;AZ&amp;quot;, zip: &amp;quot;12345&amp;quot;);
            PrintCustomer(&amp;quot;Bob Smith&amp;quot;, city: &amp;quot;Phoenix&amp;quot;, state: &amp;quot;AZ&amp;quot;);

            Console.ReadLine();
        }

        static void PrintCustomer(string name, string state, string city = &amp;quot;&amp;quot;, string zip = &amp;quot;&amp;quot;)
        {
            Console.WriteLine(&amp;quot;{0}\t{1},{2} {3}&amp;quot;, name, city, state, zip);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Silverlight Experiments</title>
      <link>http://bsparks.github.io/2010/03/24/Silverlight-Experiments/</link>
      <pubDate>Wed, 24 Mar 2010 00:42:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2010/03/24/Silverlight-Experiments/</guid>
      <description>&lt;p&gt;I haven&amp;rsquo;t stopped working on XNA game development, but I have had to take some time recently to further hone my &lt;a href=&#34;http://www.silverlight.net&#34;&gt;Silverlight &lt;/a&gt;skills. Silverlight 4 RC was recently released and the full version should be out in a month or so, so I decided that I better start playing with it now (in reality, I should have been playing with it since the beta&amp;hellip;).&lt;/p&gt;

&lt;p&gt;One of the new controls that I was most excited about is the WebBrowser control. You would think that already being in a web browser, having the ability to render HTML wouldn&amp;rsquo;t be that important within Silverlight, but it is. The good news is, this will help make that much easier. The bad news is, it only works in Out of Browser mode. I assume this is per the usual security concerns that really hinder development on the web IMHO. But, once it becomes a trusted application that the user has chosen to install, then you can use it. &lt;a href=&#34;http://superiorcode.com/blog/wp-content/uploads/2010/03/sl4_browser.png&#34;&gt;&lt;img class=&#34;alignright size-medium wp-image-126&#34; title=&#34;sl4_browser&#34; src=&#34;http://superiorcode.com/blog/wp-content/uploads/2010/03/sl4_browser-300x116.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;116&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following properties are the most important ones when working with the WebBrowser control:
&lt;ul&gt;
    &lt;li&gt;Source: gets or sets the URI that should be rendered in the WebBrowser control&lt;/li&gt;
    &lt;li&gt;Navigate: specifies the URI that should be loaded in the control (works identical to the Source property)&lt;/li&gt;
    &lt;li&gt;NavigateToString: you can also display an on-the-fly generated string of HTML. This can be done using this method.&lt;/li&gt;
&lt;/ul&gt;
Another great new control is the RichTextBox.&lt;/p&gt;

&lt;p&gt;This new control includes clipboard support, text formatting and BiDi (Bidirectional) text support for input and output. The control also enables applications to show rich text and allows users to input formatted text (Bold, Italic, Underline, Font family, Font size and Font color), highlighting of text, and embedded elements such as Hyperlinks and Images.&lt;/p&gt;

&lt;p&gt;Another useful feature is Silverlight&amp;rsquo;s Drop Target API. This feature allows end users to drag &amp;amp; drop word documents directly in to the RichTextBox control. The control also can return Xaml allowing the format of rich text to easily be stored and retrieved.&lt;/p&gt;

&lt;p&gt;I have created a section on this site for &lt;a href=&#34;http://superiorcode.com/blog/?page_id=105&#34;&gt;Silverlight Demos&lt;/a&gt; that I will be posting various experiments to. At the moment, there is only one, and it is Silverlight 3, but soon I will post more.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>