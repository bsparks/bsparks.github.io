<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Game-Development on superior code </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://bsparks.github.io/categories/game-development/index.xml/</link>
    <language>en-us</language>
    <author>Ben Sparks</author>
    
    <updated>Thu, 12 Apr 2012 08:40:00 MST</updated>
    
    <item>
      <title>Mine Mars</title>
      <link>http://bsparks.github.io/2012/04/12/Mine-Mars/</link>
      <pubDate>Thu, 12 Apr 2012 08:40:00 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2012/04/12/Mine-Mars/</guid>
      <description>&lt;p&gt;My friend John has been working on a WebGL game for some time now, and he&amp;rsquo;s decided to do a kickstarter for it. I&amp;rsquo;ve contributed a few bits of code and a dash of inspiration to this project. Check it out!&lt;/p&gt;

&lt;iframe src=&#34;http://www.kickstarter.com/projects/1355251822/mine-mars-a-voxel-based-javascript-webgl-adventure/widget/video.html&#34; frameborder=&#34;0&#34; width=&#34;480px&#34; height=&#34;360px&#34;&gt;&lt;/iframe&gt;
&lt;iframe src=&#34;http://www.kickstarter.com/projects/1355251822/mine-mars-a-voxel-based-javascript-webgl-adventure/widget/card.html&#34; frameborder=&#34;0&#34; width=&#34;220px&#34; height=&#34;380px&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Xbox Indie Game</title>
      <link>http://bsparks.github.io/2011/05/09/Xbox-Indie-Game/</link>
      <pubDate>Mon, 09 May 2011 09:01:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2011/05/09/Xbox-Indie-Game/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working on this game for about a year now, and I haven&amp;rsquo;t posted about it before&amp;hellip; why? Dunno so here we go. The game is called For the Moon King. It&amp;rsquo;s a top down twin stick shooter. Here is a screenshot of the almost complete main menu. The idea is that the little elf travels around to the various spots on the map for each item in the menu that is in the lake.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://superiorcode.com/blog/wp-content/uploads/2011/05/MenuShot1.jpg&#34;&gt;&lt;img class=&#34;aligncenter size-large wp-image-200&#34; title=&#34;MenuShot1&#34; src=&#34;http://superiorcode.com/blog/wp-content/uploads/2011/05/MenuShot1-1024x598.jpg&#34; alt=&#34;&#34; width=&#34;600&#34; height=&#34;350&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please like us on &lt;a title=&#34;For The Moon King!&#34; href=&#34;http://www.facebook.com/forthemoonking&#34; target=&#34;_blank&#34;&gt;Facebook&lt;/a&gt;! Don&amp;rsquo;t do it for me, do it For the Moon King :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>XNA Color Formatted Text</title>
      <link>http://bsparks.github.io/2010/05/16/XNA-Color-Formatted-Text/</link>
      <pubDate>Sun, 16 May 2010 09:17:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2010/05/16/XNA-Color-Formatted-Text/</guid>
      <description>&lt;p&gt;I recently have been working on a simple &amp;ldquo;old school&amp;rdquo; rpg game for XNA. One of the features that I want to have is scrolling text for combat and other messages that are given to the player. What I am talking about might look like this:
&lt;blockquote&gt;
&lt;h3&gt;You swing at the &lt;strong&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;goblin&lt;/span&gt;&lt;/strong&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt; &lt;/span&gt;and hit for &lt;strong&gt;&lt;span style=&#34;color: #00ccff;&#34;&gt;8&lt;/span&gt;&lt;/strong&gt; damage.&lt;/h3&gt;
&lt;/blockquote&gt;
Well, there isn&amp;rsquo;t any built in method to draw text to the screen and have the colors change in one string. Pretty much the only way (or at least the easiest way) to accomplish this is to use multiple DrawString calls on the SpriteBatch. When thinking about that I didn&amp;rsquo;t think it would be a terribly difficult task, but I decided to do a google search for any already made solutions. I found an article on the &lt;a href=&#34;http://www.xnawiki.com&#34;&gt;XNAWiki&lt;/a&gt; called &lt;a href=&#34;http://www.xnawiki.com/index.php?title=Inline_Color_Code_Processing&#34;&gt;Inline Color Code Processing&lt;/a&gt; that claims to (I haven&amp;rsquo;t tried it) do the trick. When I examined it though, I found that I couldn&amp;rsquo;t be happy with their implementation. They chose to define a set number of colors and then reference them in the string using an integer index. That to me seemed very limited, and even though my project is simple, I&amp;rsquo;d rather not hard code in a bunch of colors. What I wanted is to be able to type in a color in the string and have it parse out to the color I wanted, much like HTML or BBCODE would work. The best way I could think of to do this is using HEX values, just like HTML or CSS would work. Unfortunately, getting a color from HEX is another thing that isn&amp;rsquo;t built into XNA. So, back to google and I found &lt;a title=&#34;The Dead Pixel Society&#34; href=&#34;http://www.thedeadpixelsociety.com/2010/04/hex-colors/&#34; target=&#34;_blank&#34;&gt;this blog&lt;/a&gt; that had the extensions I needed already worked out! Ok, fantastic, now the final piece, I just needed to write up a function to display the text. It actually ended up being pretty easy and perhaps it&amp;rsquo;s not the best implementation, but it works perfectly. To use it, you setup your string like so: &amp;ldquo;You attack the [color:#FFFF0000]goblin[/color] and hit for [color:#FF00FF00]8[/color] damage.&amp;rdquo; Of course, just as the extension is converting the HEX to actual colors, you can convert the colors to HEX when you are making the string and use some of the built in colors like Color.Red.ToHex(true).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static void DrawColorFormattedText(SpriteBatch spriteBatch, SpriteFont font, Vector2 position, string text)
{
    Color defaultColor = Color.White;

    // only bother if we have color commands involved
    if (text.Contains(&amp;quot;[color:&amp;quot;))
    {
        // how far in x to offset from position
        int currentOffset = 0;

        // example:
        // string.Format(&amp;quot;You attempt to hit the [color:#FFFF0000]{0}[/color] but [color:{1}]MISS[/color]!&amp;quot;,
        // currentMonster.Name, Color.Red.ToHex(true));
        string[] splits = text.Split(new string[] { &amp;quot;[color:&amp;quot; }, StringSplitOptions.RemoveEmptyEntries);
        foreach (var str in splits)
        {
            // if this section starts with a color
            if (str.StartsWith(&amp;quot;#&amp;quot;))
            {
                // #AARRGGBB
                // #FFFFFFFFF
                // #123456789
                string color = str.Substring(0, 9);

                // any subsequent msgs after the [/color] tag are defaultColor
                string[] msgs = str.Substring(10).Split(new string[] { &amp;quot;[/color]&amp;quot; }, StringSplitOptions.RemoveEmptyEntries);

                // always draw [0] there should be at least one
                spriteBatch.DrawString(font, msgs[0], position + new Vector2(currentOffset, 0), color.ToColor());
                currentOffset += (int)font.MeasureString(msgs[0]).X;

                // there should only ever be one other string or none
                if(msgs.Length == 2)
                {
                    spriteBatch.DrawString(font, msgs[1], position + new Vector2(currentOffset, 0), defaultColor);
                    currentOffset += (int)font.MeasureString(msgs[1]).X;
                }
            }
            else
            {
                spriteBatch.DrawString(font, str, position + new Vector2(currentOffset, 0), defaultColor);
                currentOffset += (int)font.MeasureString(str).X;
            }
        }
    }
    else
    {
        // just draw the string as ordered
        spriteBatch.DrawString(font, text, position, defaultColor);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here it is, pics or it didn&amp;rsquo;t happen :)&lt;/p&gt;

&lt;p&gt;[caption id=&amp;ldquo;attachment_147&amp;rdquo; align=&amp;ldquo;alignleft&amp;rdquo; width=&amp;ldquo;384&amp;rdquo; caption=&amp;ldquo;Colored Rpg Text&amp;rdquo;]&lt;a href=&#34;http://superiorcode.com/blog/wp-content/uploads/2010/05/coloredTextEx.jpg&#34;&gt;&lt;img class=&#34;size-full wp-image-147&#34; title=&#34;coloredTextEx&#34; src=&#34;http://superiorcode.com/blog/wp-content/uploads/2010/05/coloredTextEx.jpg&#34; alt=&#34;&#34; width=&#34;384&#34; height=&#34;191&#34; /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Neat Mandelbrot and Shaders</title>
      <link>http://bsparks.github.io/2010/03/05/Neat-Mandelbrot-and-Shaders/</link>
      <pubDate>Fri, 05 Mar 2010 02:21:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2010/03/05/Neat-Mandelbrot-and-Shaders/</guid>
      <description>&lt;p&gt;In my surfing around to learn various things for XNA I started looking into procedural textures. Of course, anything that can be generated by the computer instead of my art is great :)&lt;/p&gt;

&lt;p&gt;One thing that I found is the Mandelbrot. After a combination of techniques from &lt;a href=&#34;http://blogs.msdn.com/shawnhar/archive/2006/12/11/sixty-fractals-per-second.aspx&#34; target=&#34;_blank&#34;&gt;Shawn Hargreaves&amp;rsquo; Blog&lt;/a&gt; and &lt;a href=&#34;http://blog.nostatic.org/2009/09/fractal-rendering-on-gpu-mandelbrot-and.html&#34; target=&#34;_blank&#34;&gt;Mike&amp;rsquo;s Code Blog&lt;/a&gt; I was able to get something up and running. It uses HLSL shaders and does all the &amp;ldquo;rendering&amp;rdquo; on the GPU. I have yet to try it on the Xbox 360, but I think it will work. It&amp;rsquo;s pretty interesting and I&amp;rsquo;ve already learned a bunch about how Pixel Shaders work from it (which they have been a complete mystery to me before).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://superiorcode.com/blog/wp-content/uploads/2010/03/mandelbrot.png&#34;&gt;&lt;img class=&#34;aligncenter size-medium wp-image-87&#34; title=&#34;mandelbrot&#34; src=&#34;http://superiorcode.com/blog/wp-content/uploads/2010/03/mandelbrot-300x234.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;234&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here I&amp;rsquo;ll post the shader file to demonstrate my changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-hlsl&#34;&gt;#define Iterations 128

float2 Pan;
float Zoom;
float Aspect;
float2 JuliaSeed = float2(0.39, -0.2);
float2 RandomSeed = float2(0.88, 1);
float3 ColorScale = float3(4, 5, 6);

float ComputeValue(float2 v, float2 offset)
{
   float vxsquare = 0;
   float vysquare = 0;

   int iteration = 0;
   int lastIteration = Iterations;

   do
   {
       vxsquare = v.x * v.x;
       vysquare = v.y * v.y;

       v = float2(vxsquare - vysquare, v.x * v.y * 2) + offset;

       iteration++;

       if ((lastIteration == Iterations) &amp;amp;&amp;amp; (vxsquare + vysquare) &amp;gt; 4.0)
       {
           lastIteration = iteration + 1;
       }
   }
   while (iteration &amp;lt; lastIteration);

   return (float(iteration) - (log(log(sqrt(vxsquare + vysquare))) / log(2.0))) / float(Iterations);
}

float4 Mandelbrot_PixelShader(float2 texCoord : TEXCOORD0) : COLOR0
{
   float2 v = (texCoord - 0.5) * Zoom * float2(1, Aspect) - Pan;

   float val = ComputeValue(v, v);

   return float4(sin(val * ColorScale.x), sin(val * ColorScale.y), sin(val * ColorScale.z), 1);
}

float4 Julia_PixelShader(float2 texCoord : TEXCOORD0) : COLOR0
{
   float2 v = (texCoord - 0.5) * Zoom * float2(1, Aspect) - Pan;

   float val = ComputeValue(v, JuliaSeed);

   return float4(sin(val * ColorScale.x), sin(val * ColorScale.y), sin(val * ColorScale.z), 1);
}

float4 Random_PixelShader(float2 texCoord : TEXCOORD0) : COLOR0
{
   float2 v = (texCoord - 0.5) * Zoom * float2(1, Aspect) - Pan;

   float val = ComputeValue(v, RandomSeed);

   return float4(sin(val * ColorScale.x), sin(val * ColorScale.y), sin(val * ColorScale.z), 1);
}

technique Mandelbrot
{
    pass
    {
        PixelShader = compile ps_3_0 Mandelbrot_PixelShader();
    }
}

technique Julia
{
   pass
   {
       PixelShader = compile ps_3_0 Julia_PixelShader();
   }
}

technique Random
{
   pass
   {
       PixelShader = compile ps_3_0 Random_PixelShader();
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, all I really did is add a RandomSeed and a new technique. In the Xna code I setup a timer so that the random seed will generate every 30 seconds, and in between that the seed will increment so you can see how it flows. I also added some keys to view the various techniques.&lt;/p&gt;

&lt;p&gt;Here is the game code that makes all that go:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;
using Microsoft.Xna.Framework.Net;
using Microsoft.Xna.Framework.Storage;

namespace MandlebrotTest
{
    /// &amp;lt;summary&amp;gt;
    /// This is the main type for your game
    /// &amp;lt;/summary&amp;gt;
    public class Game1 : Microsoft.Xna.Framework.Game
    {
        GraphicsDeviceManager graphics;

        Effect mandelbrot;
        SpriteBatch spriteBatch;
        Texture2D dummyTexture;
        string tech = &amp;quot;Mandelbrot&amp;quot;;

        Vector2 pan = new Vector2(0.25f, 0);
        float zoom = 3;

        Random rand = new Random();

        double[] speeds = { 1 / 10f, 1 / 25f, 1 / 50f, 1 / 100f, 1 / 200f, 1 / 500f, 1 / 1000f };//{1 / 100f, 1 / 50f, 1 / 25f, 1 / 10f, 1 / 5f, 1 };
        int speedIndex = 3;

        float cycleTimer = 0f;
        Vector2 randomSeed = Vector2.Zero;

        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = &amp;quot;Content&amp;quot;;

            IsFixedTimeStep = true;
            TargetElapsedTime = TimeSpan.FromSeconds( speeds[speedIndex] );
        }

        /// &amp;lt;summary&amp;gt;
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// &amp;lt;/summary&amp;gt;
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here

            base.Initialize();
        }

        /// &amp;lt;summary&amp;gt;
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// &amp;lt;/summary&amp;gt;
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);

            mandelbrot = Content.Load&amp;lt;Effect&amp;gt;(&amp;quot;Mandelbrot&amp;quot;);

            int w = graphics.GraphicsDevice.Viewport.Width;
            int h = graphics.GraphicsDevice.Viewport.Height;

            dummyTexture = new Texture2D(graphics.GraphicsDevice, w, h, 1,
                                         TextureUsage.None, SurfaceFormat.Color);
        }

        /// &amp;lt;summary&amp;gt;
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// &amp;lt;/summary&amp;gt;
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// &amp;lt;summary&amp;gt;
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&amp;quot;gameTime&amp;quot;&amp;gt;Provides a snapshot of timing values.&amp;lt;/param&amp;gt;
        protected override void Update(GameTime gameTime)
        {
            // Allows the game to exit
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed ||
                Keyboard.GetState(PlayerIndex.One).IsKeyDown(Keys.Escape))
                this.Exit();

            GamePadState pad = GamePad.GetState(PlayerIndex.One);
            KeyboardState kb = Keyboard.GetState(PlayerIndex.One);

            // swap techniques
            if (kb.IsKeyDown(Keys.T))
                tech = &amp;quot;Julia&amp;quot;;
            if (kb.IsKeyDown(Keys.R))
                tech = &amp;quot;Mandelbrot&amp;quot;;
            if (kb.IsKeyDown(Keys.E))
                tech = &amp;quot;Random&amp;quot;;

            cycleTimer += (float)gameTime.ElapsedGameTime.TotalMilliseconds;

            // start new random every 30 secs
            if (cycleTimer &amp;gt; 30000f)
            {
                randomSeed = new Vector2((float)rand.NextDouble(), -(float)rand.NextDouble());

                cycleTimer = 0.0f;
            }

            mandelbrot.Parameters[&amp;quot;RandomSeed&amp;quot;].SetValue(randomSeed);

            // update seed
            randomSeed += new Vector2(-0.00075f, 0.00075f);

            if (pad.Buttons.A == ButtonState.Pressed || kb.IsKeyDown(Keys.Z))
                zoom /= 1.05f;

            if (pad.Buttons.B == ButtonState.Pressed || kb.IsKeyDown(Keys.X))
                zoom *= 1.05f;

            float panSensitivity = 0.01f * (float)Math.Log(zoom + 1);

            pan += new Vector2(pad.ThumbSticks.Left.X, -pad.ThumbSticks.Left.Y) * panSensitivity;

            base.Update(gameTime);
        }

        /// &amp;lt;summary&amp;gt;
        /// This is called when the game should draw itself.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&amp;quot;gameTime&amp;quot;&amp;gt;Provides a snapshot of timing values.&amp;lt;/param&amp;gt;
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);

            GraphicsDevice device = graphics.GraphicsDevice;

            float aspectRatio = (float)device.Viewport.Height / (float)device.Viewport.Width;

            mandelbrot.Parameters[&amp;quot;Pan&amp;quot;].SetValue(pan);
            mandelbrot.Parameters[&amp;quot;Zoom&amp;quot;].SetValue(zoom);
            mandelbrot.Parameters[&amp;quot;Aspect&amp;quot;].SetValue(aspectRatio);

            spriteBatch.Begin(SpriteBlendMode.None, SpriteSortMode.Immediate, SaveStateMode.None);

            mandelbrot.CurrentTechnique = mandelbrot.Techniques[tech];

            mandelbrot.Begin();
            mandelbrot.CurrentTechnique.Passes[0].Begin();

            spriteBatch.Draw(dummyTexture, Vector2.Zero, Color.White);

            spriteBatch.End();
            mandelbrot.CurrentTechnique.Passes[0].End();
            mandelbrot.End();

            base.Draw(gameTime);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course another reason besides art that I am interested in all this is that it can be helpful for random map generation in my project (which is still under way). I&amp;rsquo;ve made some improvements on that front, and I&amp;rsquo;ll post an update on it soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Still Hackin</title>
      <link>http://bsparks.github.io/2009/07/28/Still-Hackin/</link>
      <pubDate>Tue, 28 Jul 2009 09:01:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2009/07/28/Still-Hackin/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m still working on the &lt;a href=&#34;http://dungeonhack.sourceforge.net/Main_Page&#34; target=&#34;_blank&#34;&gt;DungeonHack&lt;/a&gt; project, and recently I&amp;rsquo;ve been given SVN commit access! Yay! This is the first open source project that I&amp;rsquo;ve ever officially been a part of. I&amp;rsquo;ve contributed several patches and actually feel like progress is being made which is always a plus. I&amp;rsquo;m glad that I&amp;rsquo;ve joined a team instead of trying to build a game by myself like I usually do.&lt;/p&gt;

&lt;p&gt;Right now I&amp;rsquo;m working on integrating Paged Geometry grass into the engine instead of the current. This way we can use a color map to mask the grass off the roads.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dungeon Hacking</title>
      <link>http://bsparks.github.io/2009/07/15/Dungeon-Hacking/</link>
      <pubDate>Wed, 15 Jul 2009 09:01:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2009/07/15/Dungeon-Hacking/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve joined the open source project &lt;a title=&#34;DungeonHack&#34; href=&#34;http://dungeonhack.sourceforge.net&#34; target=&#34;_blank&#34;&gt;DungeonHack&lt;/a&gt;, a FOSS game &amp;ldquo;Forged in the Spirit of Daggerfall&amp;rdquo;. Apparently at one time they planned to remake Daggerfall but are now just trying to make a modern 3D rpg game that has some of the best qualities of Daggerfall.&lt;/p&gt;

&lt;p&gt;It took me a bit to get it all compiled, but I was able to get it up and running. They are using Python for the scripting system. I&amp;rsquo;ve never used Python before, though I&amp;rsquo;ve heard of it and seen many projects choose to use it. I was really hoping to use Google&amp;rsquo;s V8 engine for a scripting engine, but I suppose it wouldn&amp;rsquo;t hurt to learn another language. The good thing is that since it&amp;rsquo;s all open source I can mess around with it any way I like. I may even work on integrating the V8 engine in there at some point. (either on my own or convince them to use it).&lt;/p&gt;

&lt;p&gt;My only concern with Python really is that I think that the end user has to install Python for the game to work. I suppose that isn&amp;rsquo;t really different from having to have .NET framework installed or Java or any of those, but I think that there is something that most professional games do not do. Most of the commercial titles that I play don&amp;rsquo;t need to install these, they usually have all their dependencies built in. Or maybe I just never noticed because I already had them installed.&lt;/p&gt;

&lt;p&gt;There are several other open source libraries that the system uses: Ogre3D for graphics, Bullet for physics, OpenAL for sound, myGUI for a UI, and PagedGeometry.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Voxels</title>
      <link>http://bsparks.github.io/2009/07/08/Voxels/</link>
      <pubDate>Wed, 08 Jul 2009 12:42:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2009/07/08/Voxels/</guid>
      <description>&lt;p&gt;A while ago I was really looking into Voxels and Volumetric rendering. It seemed in the research I had done at the time that this was a somewhat old technology. It didnt look like anyone was still using it, even though it still seemed to me like it was a very viable solution. Anyway, now in looking at Ogre stuff I found that someone else has created a basic Voxel engine that uses Ogre to render it. &lt;a href=&#34;http://www.thermite3d.org/joomla/&#34; target=&#34;_blank&#34;&gt;Thermite 3D&lt;/a&gt; is the name of the engine, using what they call PolyVox technology. Both are available via the GPL and are open source.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/qmZrdBBQThk&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;They are using it for fully destructable environments, which in themselves are very cool, but what I am thinking about is using it to create volumetric cloud systems and particle effects. Oh and the other thing that I think could become of it is actually being able to make caves. Making caves using the current standard (CSG) is one of the more challenging items. I think that there are a LOT of applications for this technology, which for some reason was usually only used for medical and scientific modelling. I think that they really have the right idea using it for games and other simulations. Plus, let&amp;rsquo;s mash-up I say, what can be created combining a 3D voxel world and the 3D browser web? Are those ridiculous early 90&amp;rsquo;s visions of the internet going to come to life?&lt;/p&gt;

&lt;p&gt;Here are some of the voxel engines I found in the past, most from early 2000&amp;rsquo;s so that is why I thought this had died off&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.advsys.net/ken/voxlap/voxlap03.htm&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.advsys.net/ken/voxlap/voxlap03.htm&#34;&gt;http://www.advsys.net/ken/voxlap/voxlap03.htm&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.home.zonnet.nl/petervenis/index.htm&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.home.zonnet.nl/petervenis/index.htm&#34;&gt;http://www.home.zonnet.nl/petervenis/index.htm&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codermind.com/articles/Voxel-terrain-engine-building-the-terrain.html&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.codermind.com/articles/Voxel-terrain-engine-building-the-terrain.html&#34;&gt;http://www.codermind.com/articles/Voxel-terrain-engine-building-the-terrain.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>