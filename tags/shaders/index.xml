<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Shaders on superior code </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://bsparks.github.io/tags/shaders/index.xml/</link>
    <language>en-us</language>
    <author>Ben Sparks</author>
    
    <updated>Fri, 05 Mar 2010 02:21:44 MST</updated>
    
    <item>
      <title>Neat Mandelbrot and Shaders</title>
      <link>http://bsparks.github.io/2010/03/05/Neat-Mandelbrot-and-Shaders/</link>
      <pubDate>Fri, 05 Mar 2010 02:21:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2010/03/05/Neat-Mandelbrot-and-Shaders/</guid>
      <description>&lt;p&gt;In my surfing around to learn various things for XNA I started looking into procedural textures. Of course, anything that can be generated by the computer instead of my art is great :)&lt;/p&gt;

&lt;p&gt;One thing that I found is the Mandelbrot. After a combination of techniques from &lt;a href=&#34;http://blogs.msdn.com/shawnhar/archive/2006/12/11/sixty-fractals-per-second.aspx&#34; target=&#34;_blank&#34;&gt;Shawn Hargreaves&amp;rsquo; Blog&lt;/a&gt; and &lt;a href=&#34;http://blog.nostatic.org/2009/09/fractal-rendering-on-gpu-mandelbrot-and.html&#34; target=&#34;_blank&#34;&gt;Mike&amp;rsquo;s Code Blog&lt;/a&gt; I was able to get something up and running. It uses HLSL shaders and does all the &amp;ldquo;rendering&amp;rdquo; on the GPU. I have yet to try it on the Xbox 360, but I think it will work. It&amp;rsquo;s pretty interesting and I&amp;rsquo;ve already learned a bunch about how Pixel Shaders work from it (which they have been a complete mystery to me before).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://superiorcode.com/blog/wp-content/uploads/2010/03/mandelbrot.png&#34;&gt;&lt;img class=&#34;aligncenter size-medium wp-image-87&#34; title=&#34;mandelbrot&#34; src=&#34;http://superiorcode.com/blog/wp-content/uploads/2010/03/mandelbrot-300x234.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;234&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here I&amp;rsquo;ll post the shader file to demonstrate my changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-hlsl&#34;&gt;#define Iterations 128

float2 Pan;
float Zoom;
float Aspect;
float2 JuliaSeed = float2(0.39, -0.2);
float2 RandomSeed = float2(0.88, 1);
float3 ColorScale = float3(4, 5, 6);

float ComputeValue(float2 v, float2 offset)
{
   float vxsquare = 0;
   float vysquare = 0;

   int iteration = 0;
   int lastIteration = Iterations;

   do
   {
       vxsquare = v.x * v.x;
       vysquare = v.y * v.y;

       v = float2(vxsquare - vysquare, v.x * v.y * 2) + offset;

       iteration++;

       if ((lastIteration == Iterations) &amp;amp;&amp;amp; (vxsquare + vysquare) &amp;gt; 4.0)
       {
           lastIteration = iteration + 1;
       }
   }
   while (iteration &amp;lt; lastIteration);

   return (float(iteration) - (log(log(sqrt(vxsquare + vysquare))) / log(2.0))) / float(Iterations);
}

float4 Mandelbrot_PixelShader(float2 texCoord : TEXCOORD0) : COLOR0
{
   float2 v = (texCoord - 0.5) * Zoom * float2(1, Aspect) - Pan;

   float val = ComputeValue(v, v);

   return float4(sin(val * ColorScale.x), sin(val * ColorScale.y), sin(val * ColorScale.z), 1);
}

float4 Julia_PixelShader(float2 texCoord : TEXCOORD0) : COLOR0
{
   float2 v = (texCoord - 0.5) * Zoom * float2(1, Aspect) - Pan;

   float val = ComputeValue(v, JuliaSeed);

   return float4(sin(val * ColorScale.x), sin(val * ColorScale.y), sin(val * ColorScale.z), 1);
}

float4 Random_PixelShader(float2 texCoord : TEXCOORD0) : COLOR0
{
   float2 v = (texCoord - 0.5) * Zoom * float2(1, Aspect) - Pan;

   float val = ComputeValue(v, RandomSeed);

   return float4(sin(val * ColorScale.x), sin(val * ColorScale.y), sin(val * ColorScale.z), 1);
}

technique Mandelbrot
{
    pass
    {
        PixelShader = compile ps_3_0 Mandelbrot_PixelShader();
    }
}

technique Julia
{
   pass
   {
       PixelShader = compile ps_3_0 Julia_PixelShader();
   }
}

technique Random
{
   pass
   {
       PixelShader = compile ps_3_0 Random_PixelShader();
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, all I really did is add a RandomSeed and a new technique. In the Xna code I setup a timer so that the random seed will generate every 30 seconds, and in between that the seed will increment so you can see how it flows. I also added some keys to view the various techniques.&lt;/p&gt;

&lt;p&gt;Here is the game code that makes all that go:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;
using Microsoft.Xna.Framework.Net;
using Microsoft.Xna.Framework.Storage;

namespace MandlebrotTest
{
    /// &amp;lt;summary&amp;gt;
    /// This is the main type for your game
    /// &amp;lt;/summary&amp;gt;
    public class Game1 : Microsoft.Xna.Framework.Game
    {
        GraphicsDeviceManager graphics;

        Effect mandelbrot;
        SpriteBatch spriteBatch;
        Texture2D dummyTexture;
        string tech = &amp;quot;Mandelbrot&amp;quot;;

        Vector2 pan = new Vector2(0.25f, 0);
        float zoom = 3;

        Random rand = new Random();

        double[] speeds = { 1 / 10f, 1 / 25f, 1 / 50f, 1 / 100f, 1 / 200f, 1 / 500f, 1 / 1000f };//{1 / 100f, 1 / 50f, 1 / 25f, 1 / 10f, 1 / 5f, 1 };
        int speedIndex = 3;

        float cycleTimer = 0f;
        Vector2 randomSeed = Vector2.Zero;

        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = &amp;quot;Content&amp;quot;;

            IsFixedTimeStep = true;
            TargetElapsedTime = TimeSpan.FromSeconds( speeds[speedIndex] );
        }

        /// &amp;lt;summary&amp;gt;
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// &amp;lt;/summary&amp;gt;
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here

            base.Initialize();
        }

        /// &amp;lt;summary&amp;gt;
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// &amp;lt;/summary&amp;gt;
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);

            mandelbrot = Content.Load&amp;lt;Effect&amp;gt;(&amp;quot;Mandelbrot&amp;quot;);

            int w = graphics.GraphicsDevice.Viewport.Width;
            int h = graphics.GraphicsDevice.Viewport.Height;

            dummyTexture = new Texture2D(graphics.GraphicsDevice, w, h, 1,
                                         TextureUsage.None, SurfaceFormat.Color);
        }

        /// &amp;lt;summary&amp;gt;
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// &amp;lt;/summary&amp;gt;
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// &amp;lt;summary&amp;gt;
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&amp;quot;gameTime&amp;quot;&amp;gt;Provides a snapshot of timing values.&amp;lt;/param&amp;gt;
        protected override void Update(GameTime gameTime)
        {
            // Allows the game to exit
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed ||
                Keyboard.GetState(PlayerIndex.One).IsKeyDown(Keys.Escape))
                this.Exit();

            GamePadState pad = GamePad.GetState(PlayerIndex.One);
            KeyboardState kb = Keyboard.GetState(PlayerIndex.One);

            // swap techniques
            if (kb.IsKeyDown(Keys.T))
                tech = &amp;quot;Julia&amp;quot;;
            if (kb.IsKeyDown(Keys.R))
                tech = &amp;quot;Mandelbrot&amp;quot;;
            if (kb.IsKeyDown(Keys.E))
                tech = &amp;quot;Random&amp;quot;;

            cycleTimer += (float)gameTime.ElapsedGameTime.TotalMilliseconds;

            // start new random every 30 secs
            if (cycleTimer &amp;gt; 30000f)
            {
                randomSeed = new Vector2((float)rand.NextDouble(), -(float)rand.NextDouble());

                cycleTimer = 0.0f;
            }

            mandelbrot.Parameters[&amp;quot;RandomSeed&amp;quot;].SetValue(randomSeed);

            // update seed
            randomSeed += new Vector2(-0.00075f, 0.00075f);

            if (pad.Buttons.A == ButtonState.Pressed || kb.IsKeyDown(Keys.Z))
                zoom /= 1.05f;

            if (pad.Buttons.B == ButtonState.Pressed || kb.IsKeyDown(Keys.X))
                zoom *= 1.05f;

            float panSensitivity = 0.01f * (float)Math.Log(zoom + 1);

            pan += new Vector2(pad.ThumbSticks.Left.X, -pad.ThumbSticks.Left.Y) * panSensitivity;

            base.Update(gameTime);
        }

        /// &amp;lt;summary&amp;gt;
        /// This is called when the game should draw itself.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&amp;quot;gameTime&amp;quot;&amp;gt;Provides a snapshot of timing values.&amp;lt;/param&amp;gt;
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);

            GraphicsDevice device = graphics.GraphicsDevice;

            float aspectRatio = (float)device.Viewport.Height / (float)device.Viewport.Width;

            mandelbrot.Parameters[&amp;quot;Pan&amp;quot;].SetValue(pan);
            mandelbrot.Parameters[&amp;quot;Zoom&amp;quot;].SetValue(zoom);
            mandelbrot.Parameters[&amp;quot;Aspect&amp;quot;].SetValue(aspectRatio);

            spriteBatch.Begin(SpriteBlendMode.None, SpriteSortMode.Immediate, SaveStateMode.None);

            mandelbrot.CurrentTechnique = mandelbrot.Techniques[tech];

            mandelbrot.Begin();
            mandelbrot.CurrentTechnique.Passes[0].Begin();

            spriteBatch.Draw(dummyTexture, Vector2.Zero, Color.White);

            spriteBatch.End();
            mandelbrot.CurrentTechnique.Passes[0].End();
            mandelbrot.End();

            base.Draw(gameTime);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course another reason besides art that I am interested in all this is that it can be helpful for random map generation in my project (which is still under way). I&amp;rsquo;ve made some improvements on that front, and I&amp;rsquo;ll post an update on it soon.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>