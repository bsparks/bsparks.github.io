<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>C on superior code </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://bsparks.github.io/tags/c/index.xml/</link>
    <language>en-us</language>
    <author>Ben Sparks</author>
    
    <updated>Sun, 16 May 2010 09:17:44 MST</updated>
    
    <item>
      <title>XNA Color Formatted Text</title>
      <link>http://bsparks.github.io/2010/05/16/XNA-Color-Formatted-Text/</link>
      <pubDate>Sun, 16 May 2010 09:17:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2010/05/16/XNA-Color-Formatted-Text/</guid>
      <description>&lt;p&gt;I recently have been working on a simple &amp;ldquo;old school&amp;rdquo; rpg game for XNA. One of the features that I want to have is scrolling text for combat and other messages that are given to the player. What I am talking about might look like this:
&lt;blockquote&gt;
&lt;h3&gt;You swing at the &lt;strong&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;goblin&lt;/span&gt;&lt;/strong&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt; &lt;/span&gt;and hit for &lt;strong&gt;&lt;span style=&#34;color: #00ccff;&#34;&gt;8&lt;/span&gt;&lt;/strong&gt; damage.&lt;/h3&gt;
&lt;/blockquote&gt;
Well, there isn&amp;rsquo;t any built in method to draw text to the screen and have the colors change in one string. Pretty much the only way (or at least the easiest way) to accomplish this is to use multiple DrawString calls on the SpriteBatch. When thinking about that I didn&amp;rsquo;t think it would be a terribly difficult task, but I decided to do a google search for any already made solutions. I found an article on the &lt;a href=&#34;http://www.xnawiki.com&#34;&gt;XNAWiki&lt;/a&gt; called &lt;a href=&#34;http://www.xnawiki.com/index.php?title=Inline_Color_Code_Processing&#34;&gt;Inline Color Code Processing&lt;/a&gt; that claims to (I haven&amp;rsquo;t tried it) do the trick. When I examined it though, I found that I couldn&amp;rsquo;t be happy with their implementation. They chose to define a set number of colors and then reference them in the string using an integer index. That to me seemed very limited, and even though my project is simple, I&amp;rsquo;d rather not hard code in a bunch of colors. What I wanted is to be able to type in a color in the string and have it parse out to the color I wanted, much like HTML or BBCODE would work. The best way I could think of to do this is using HEX values, just like HTML or CSS would work. Unfortunately, getting a color from HEX is another thing that isn&amp;rsquo;t built into XNA. So, back to google and I found &lt;a title=&#34;The Dead Pixel Society&#34; href=&#34;http://www.thedeadpixelsociety.com/2010/04/hex-colors/&#34; target=&#34;_blank&#34;&gt;this blog&lt;/a&gt; that had the extensions I needed already worked out! Ok, fantastic, now the final piece, I just needed to write up a function to display the text. It actually ended up being pretty easy and perhaps it&amp;rsquo;s not the best implementation, but it works perfectly. To use it, you setup your string like so: &amp;ldquo;You attack the [color:#FFFF0000]goblin[/color] and hit for [color:#FF00FF00]8[/color] damage.&amp;rdquo; Of course, just as the extension is converting the HEX to actual colors, you can convert the colors to HEX when you are making the string and use some of the built in colors like Color.Red.ToHex(true).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static void DrawColorFormattedText(SpriteBatch spriteBatch, SpriteFont font, Vector2 position, string text)
{
    Color defaultColor = Color.White;

    // only bother if we have color commands involved
    if (text.Contains(&amp;quot;[color:&amp;quot;))
    {
        // how far in x to offset from position
        int currentOffset = 0;

        // example:
        // string.Format(&amp;quot;You attempt to hit the [color:#FFFF0000]{0}[/color] but [color:{1}]MISS[/color]!&amp;quot;,
        // currentMonster.Name, Color.Red.ToHex(true));
        string[] splits = text.Split(new string[] { &amp;quot;[color:&amp;quot; }, StringSplitOptions.RemoveEmptyEntries);
        foreach (var str in splits)
        {
            // if this section starts with a color
            if (str.StartsWith(&amp;quot;#&amp;quot;))
            {
                // #AARRGGBB
                // #FFFFFFFFF
                // #123456789
                string color = str.Substring(0, 9);

                // any subsequent msgs after the [/color] tag are defaultColor
                string[] msgs = str.Substring(10).Split(new string[] { &amp;quot;[/color]&amp;quot; }, StringSplitOptions.RemoveEmptyEntries);

                // always draw [0] there should be at least one
                spriteBatch.DrawString(font, msgs[0], position + new Vector2(currentOffset, 0), color.ToColor());
                currentOffset += (int)font.MeasureString(msgs[0]).X;

                // there should only ever be one other string or none
                if(msgs.Length == 2)
                {
                    spriteBatch.DrawString(font, msgs[1], position + new Vector2(currentOffset, 0), defaultColor);
                    currentOffset += (int)font.MeasureString(msgs[1]).X;
                }
            }
            else
            {
                spriteBatch.DrawString(font, str, position + new Vector2(currentOffset, 0), defaultColor);
                currentOffset += (int)font.MeasureString(str).X;
            }
        }
    }
    else
    {
        // just draw the string as ordered
        spriteBatch.DrawString(font, text, position, defaultColor);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here it is, pics or it didn&amp;rsquo;t happen :)&lt;/p&gt;

&lt;p&gt;[caption id=&amp;ldquo;attachment_147&amp;rdquo; align=&amp;ldquo;alignleft&amp;rdquo; width=&amp;ldquo;384&amp;rdquo; caption=&amp;ldquo;Colored Rpg Text&amp;rdquo;]&lt;a href=&#34;http://superiorcode.com/blog/wp-content/uploads/2010/05/coloredTextEx.jpg&#34;&gt;&lt;img class=&#34;size-full wp-image-147&#34; title=&#34;coloredTextEx&#34; src=&#34;http://superiorcode.com/blog/wp-content/uploads/2010/05/coloredTextEx.jpg&#34; alt=&#34;&#34; width=&#34;384&#34; height=&#34;191&#34; /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dotNet 4 New Features</title>
      <link>http://bsparks.github.io/2010/05/16/dotNet-4-New-Features/</link>
      <pubDate>Sun, 16 May 2010 09:01:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2010/05/16/dotNet-4-New-Features/</guid>
      <description>&lt;p&gt;.Net 4 has been out for a couple of weeks now and I have started to delve into the new features. Now we are up to C# version 4 as well, and one of the new features that I find really exciting is Optional and Named Parameters. Being able to use optional parameters in functions is something that is built into C++ and until now has been completely missing from C#. In the past, you basically had to override a function several times in order to give the caller more options for leaving parameters out. I am surprised really that it took this long to get them in C#, but I&amp;rsquo;m glad they are here now! Since overriding functions was the only way to do it in the past, I have to wonder if behind the scenes that is all that Microsoft is doing, generating overrides for functions, perhaps someday I&amp;rsquo;ll look into that. For now let me explain briefly how these work in C# 4.0.&lt;/p&gt;

&lt;p&gt;Much like in C++ optional parameters must come after required parameters in the parameter list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void PrintCustomer(string name, string state, string salutation=&amp;quot;n/a&amp;quot;, string city=&amp;quot;&amp;quot;, int sales=100)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, it&amp;rsquo;s pretty simple. Just create the parameter as usual, but add the default value to it. So now you can call the function with ONLY the name and state parameters if you want to.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;PrintCustomer(&amp;quot;Bob Smith&amp;quot;, &amp;quot;AZ&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty cool! Previously you have had to have 4 different overrides of that function in order to accommodate all 3 of those optional parameter configurations. So just like in C++ you can call the function with or without any of the optional parameters, but in C++ you would have to go through each of them in order, you wouldn&amp;rsquo;t for example be able to define city without defining a value for salutation. This is where Named Parameters come into play. With named parameters you can specify the parameter that you want, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;PrintCustomer(&amp;quot;Bob Smith&amp;quot;, &amp;quot;AZ&amp;quot;, city: &amp;quot;Phoenix&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome! Now we have bypassed the need to have a value for salutation! Also it is good to note that you can use named parameters even for the required parameters. That way you can provide parameters to functions in any order that you want, and provide even greater readability in code. Perhaps you have 2 similarly named parameters like state and salesState, with named parameters it would be easy to understand which is which from the call of the function (though it wouldn&amp;rsquo;t be too often you&amp;rsquo;d be using string literals in your function calls).&lt;/p&gt;

&lt;p&gt;Here is a complete VS2010 console application demonstrating this new functionality:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Net4Tests
{
    class Program
    {
        static void Main(string[] args)
        {
            PrintCustomer(&amp;quot;Tech Co&amp;quot;, &amp;quot;AZ&amp;quot;);
            PrintCustomer(&amp;quot;ABC Engineering&amp;quot;, &amp;quot;CA&amp;quot;, &amp;quot;San Diego&amp;quot;);
            PrintCustomer(&amp;quot;SwizzleSoft&amp;quot;, &amp;quot;AZ&amp;quot;, zip: &amp;quot;12345&amp;quot;);
            PrintCustomer(&amp;quot;Bob Smith&amp;quot;, city: &amp;quot;Phoenix&amp;quot;, state: &amp;quot;AZ&amp;quot;);

            Console.ReadLine();
        }

        static void PrintCustomer(string name, string state, string city = &amp;quot;&amp;quot;, string zip = &amp;quot;&amp;quot;)
        {
            Console.WriteLine(&amp;quot;{0}\t{1},{2} {3}&amp;quot;, name, city, state, zip);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Silverlight Experiments</title>
      <link>http://bsparks.github.io/2010/03/24/Silverlight-Experiments/</link>
      <pubDate>Wed, 24 Mar 2010 00:42:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2010/03/24/Silverlight-Experiments/</guid>
      <description>&lt;p&gt;I haven&amp;rsquo;t stopped working on XNA game development, but I have had to take some time recently to further hone my &lt;a href=&#34;http://www.silverlight.net&#34;&gt;Silverlight &lt;/a&gt;skills. Silverlight 4 RC was recently released and the full version should be out in a month or so, so I decided that I better start playing with it now (in reality, I should have been playing with it since the beta&amp;hellip;).&lt;/p&gt;

&lt;p&gt;One of the new controls that I was most excited about is the WebBrowser control. You would think that already being in a web browser, having the ability to render HTML wouldn&amp;rsquo;t be that important within Silverlight, but it is. The good news is, this will help make that much easier. The bad news is, it only works in Out of Browser mode. I assume this is per the usual security concerns that really hinder development on the web IMHO. But, once it becomes a trusted application that the user has chosen to install, then you can use it. &lt;a href=&#34;http://superiorcode.com/blog/wp-content/uploads/2010/03/sl4_browser.png&#34;&gt;&lt;img class=&#34;alignright size-medium wp-image-126&#34; title=&#34;sl4_browser&#34; src=&#34;http://superiorcode.com/blog/wp-content/uploads/2010/03/sl4_browser-300x116.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;116&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following properties are the most important ones when working with the WebBrowser control:
&lt;ul&gt;
    &lt;li&gt;Source: gets or sets the URI that should be rendered in the WebBrowser control&lt;/li&gt;
    &lt;li&gt;Navigate: specifies the URI that should be loaded in the control (works identical to the Source property)&lt;/li&gt;
    &lt;li&gt;NavigateToString: you can also display an on-the-fly generated string of HTML. This can be done using this method.&lt;/li&gt;
&lt;/ul&gt;
Another great new control is the RichTextBox.&lt;/p&gt;

&lt;p&gt;This new control includes clipboard support, text formatting and BiDi (Bidirectional) text support for input and output. The control also enables applications to show rich text and allows users to input formatted text (Bold, Italic, Underline, Font family, Font size and Font color), highlighting of text, and embedded elements such as Hyperlinks and Images.&lt;/p&gt;

&lt;p&gt;Another useful feature is Silverlight&amp;rsquo;s Drop Target API. This feature allows end users to drag &amp;amp; drop word documents directly in to the RichTextBox control. The control also can return Xaml allowing the format of rich text to easily be stored and retrieved.&lt;/p&gt;

&lt;p&gt;I have created a section on this site for &lt;a href=&#34;http://superiorcode.com/blog/?page_id=105&#34;&gt;Silverlight Demos&lt;/a&gt; that I will be posting various experiments to. At the moment, there is only one, and it is Silverlight 3, but soon I will post more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Neat Mandelbrot and Shaders</title>
      <link>http://bsparks.github.io/2010/03/05/Neat-Mandelbrot-and-Shaders/</link>
      <pubDate>Fri, 05 Mar 2010 02:21:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2010/03/05/Neat-Mandelbrot-and-Shaders/</guid>
      <description>&lt;p&gt;In my surfing around to learn various things for XNA I started looking into procedural textures. Of course, anything that can be generated by the computer instead of my art is great :)&lt;/p&gt;

&lt;p&gt;One thing that I found is the Mandelbrot. After a combination of techniques from &lt;a href=&#34;http://blogs.msdn.com/shawnhar/archive/2006/12/11/sixty-fractals-per-second.aspx&#34; target=&#34;_blank&#34;&gt;Shawn Hargreaves&amp;rsquo; Blog&lt;/a&gt; and &lt;a href=&#34;http://blog.nostatic.org/2009/09/fractal-rendering-on-gpu-mandelbrot-and.html&#34; target=&#34;_blank&#34;&gt;Mike&amp;rsquo;s Code Blog&lt;/a&gt; I was able to get something up and running. It uses HLSL shaders and does all the &amp;ldquo;rendering&amp;rdquo; on the GPU. I have yet to try it on the Xbox 360, but I think it will work. It&amp;rsquo;s pretty interesting and I&amp;rsquo;ve already learned a bunch about how Pixel Shaders work from it (which they have been a complete mystery to me before).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://superiorcode.com/blog/wp-content/uploads/2010/03/mandelbrot.png&#34;&gt;&lt;img class=&#34;aligncenter size-medium wp-image-87&#34; title=&#34;mandelbrot&#34; src=&#34;http://superiorcode.com/blog/wp-content/uploads/2010/03/mandelbrot-300x234.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;234&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here I&amp;rsquo;ll post the shader file to demonstrate my changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-hlsl&#34;&gt;#define Iterations 128

float2 Pan;
float Zoom;
float Aspect;
float2 JuliaSeed = float2(0.39, -0.2);
float2 RandomSeed = float2(0.88, 1);
float3 ColorScale = float3(4, 5, 6);

float ComputeValue(float2 v, float2 offset)
{
   float vxsquare = 0;
   float vysquare = 0;

   int iteration = 0;
   int lastIteration = Iterations;

   do
   {
       vxsquare = v.x * v.x;
       vysquare = v.y * v.y;

       v = float2(vxsquare - vysquare, v.x * v.y * 2) + offset;

       iteration++;

       if ((lastIteration == Iterations) &amp;amp;&amp;amp; (vxsquare + vysquare) &amp;gt; 4.0)
       {
           lastIteration = iteration + 1;
       }
   }
   while (iteration &amp;lt; lastIteration);

   return (float(iteration) - (log(log(sqrt(vxsquare + vysquare))) / log(2.0))) / float(Iterations);
}

float4 Mandelbrot_PixelShader(float2 texCoord : TEXCOORD0) : COLOR0
{
   float2 v = (texCoord - 0.5) * Zoom * float2(1, Aspect) - Pan;

   float val = ComputeValue(v, v);

   return float4(sin(val * ColorScale.x), sin(val * ColorScale.y), sin(val * ColorScale.z), 1);
}

float4 Julia_PixelShader(float2 texCoord : TEXCOORD0) : COLOR0
{
   float2 v = (texCoord - 0.5) * Zoom * float2(1, Aspect) - Pan;

   float val = ComputeValue(v, JuliaSeed);

   return float4(sin(val * ColorScale.x), sin(val * ColorScale.y), sin(val * ColorScale.z), 1);
}

float4 Random_PixelShader(float2 texCoord : TEXCOORD0) : COLOR0
{
   float2 v = (texCoord - 0.5) * Zoom * float2(1, Aspect) - Pan;

   float val = ComputeValue(v, RandomSeed);

   return float4(sin(val * ColorScale.x), sin(val * ColorScale.y), sin(val * ColorScale.z), 1);
}

technique Mandelbrot
{
    pass
    {
        PixelShader = compile ps_3_0 Mandelbrot_PixelShader();
    }
}

technique Julia
{
   pass
   {
       PixelShader = compile ps_3_0 Julia_PixelShader();
   }
}

technique Random
{
   pass
   {
       PixelShader = compile ps_3_0 Random_PixelShader();
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, all I really did is add a RandomSeed and a new technique. In the Xna code I setup a timer so that the random seed will generate every 30 seconds, and in between that the seed will increment so you can see how it flows. I also added some keys to view the various techniques.&lt;/p&gt;

&lt;p&gt;Here is the game code that makes all that go:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;
using Microsoft.Xna.Framework.Net;
using Microsoft.Xna.Framework.Storage;

namespace MandlebrotTest
{
    /// &amp;lt;summary&amp;gt;
    /// This is the main type for your game
    /// &amp;lt;/summary&amp;gt;
    public class Game1 : Microsoft.Xna.Framework.Game
    {
        GraphicsDeviceManager graphics;

        Effect mandelbrot;
        SpriteBatch spriteBatch;
        Texture2D dummyTexture;
        string tech = &amp;quot;Mandelbrot&amp;quot;;

        Vector2 pan = new Vector2(0.25f, 0);
        float zoom = 3;

        Random rand = new Random();

        double[] speeds = { 1 / 10f, 1 / 25f, 1 / 50f, 1 / 100f, 1 / 200f, 1 / 500f, 1 / 1000f };//{1 / 100f, 1 / 50f, 1 / 25f, 1 / 10f, 1 / 5f, 1 };
        int speedIndex = 3;

        float cycleTimer = 0f;
        Vector2 randomSeed = Vector2.Zero;

        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = &amp;quot;Content&amp;quot;;

            IsFixedTimeStep = true;
            TargetElapsedTime = TimeSpan.FromSeconds( speeds[speedIndex] );
        }

        /// &amp;lt;summary&amp;gt;
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// &amp;lt;/summary&amp;gt;
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here

            base.Initialize();
        }

        /// &amp;lt;summary&amp;gt;
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// &amp;lt;/summary&amp;gt;
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);

            mandelbrot = Content.Load&amp;lt;Effect&amp;gt;(&amp;quot;Mandelbrot&amp;quot;);

            int w = graphics.GraphicsDevice.Viewport.Width;
            int h = graphics.GraphicsDevice.Viewport.Height;

            dummyTexture = new Texture2D(graphics.GraphicsDevice, w, h, 1,
                                         TextureUsage.None, SurfaceFormat.Color);
        }

        /// &amp;lt;summary&amp;gt;
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// &amp;lt;/summary&amp;gt;
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// &amp;lt;summary&amp;gt;
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&amp;quot;gameTime&amp;quot;&amp;gt;Provides a snapshot of timing values.&amp;lt;/param&amp;gt;
        protected override void Update(GameTime gameTime)
        {
            // Allows the game to exit
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed ||
                Keyboard.GetState(PlayerIndex.One).IsKeyDown(Keys.Escape))
                this.Exit();

            GamePadState pad = GamePad.GetState(PlayerIndex.One);
            KeyboardState kb = Keyboard.GetState(PlayerIndex.One);

            // swap techniques
            if (kb.IsKeyDown(Keys.T))
                tech = &amp;quot;Julia&amp;quot;;
            if (kb.IsKeyDown(Keys.R))
                tech = &amp;quot;Mandelbrot&amp;quot;;
            if (kb.IsKeyDown(Keys.E))
                tech = &amp;quot;Random&amp;quot;;

            cycleTimer += (float)gameTime.ElapsedGameTime.TotalMilliseconds;

            // start new random every 30 secs
            if (cycleTimer &amp;gt; 30000f)
            {
                randomSeed = new Vector2((float)rand.NextDouble(), -(float)rand.NextDouble());

                cycleTimer = 0.0f;
            }

            mandelbrot.Parameters[&amp;quot;RandomSeed&amp;quot;].SetValue(randomSeed);

            // update seed
            randomSeed += new Vector2(-0.00075f, 0.00075f);

            if (pad.Buttons.A == ButtonState.Pressed || kb.IsKeyDown(Keys.Z))
                zoom /= 1.05f;

            if (pad.Buttons.B == ButtonState.Pressed || kb.IsKeyDown(Keys.X))
                zoom *= 1.05f;

            float panSensitivity = 0.01f * (float)Math.Log(zoom + 1);

            pan += new Vector2(pad.ThumbSticks.Left.X, -pad.ThumbSticks.Left.Y) * panSensitivity;

            base.Update(gameTime);
        }

        /// &amp;lt;summary&amp;gt;
        /// This is called when the game should draw itself.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&amp;quot;gameTime&amp;quot;&amp;gt;Provides a snapshot of timing values.&amp;lt;/param&amp;gt;
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);

            GraphicsDevice device = graphics.GraphicsDevice;

            float aspectRatio = (float)device.Viewport.Height / (float)device.Viewport.Width;

            mandelbrot.Parameters[&amp;quot;Pan&amp;quot;].SetValue(pan);
            mandelbrot.Parameters[&amp;quot;Zoom&amp;quot;].SetValue(zoom);
            mandelbrot.Parameters[&amp;quot;Aspect&amp;quot;].SetValue(aspectRatio);

            spriteBatch.Begin(SpriteBlendMode.None, SpriteSortMode.Immediate, SaveStateMode.None);

            mandelbrot.CurrentTechnique = mandelbrot.Techniques[tech];

            mandelbrot.Begin();
            mandelbrot.CurrentTechnique.Passes[0].Begin();

            spriteBatch.Draw(dummyTexture, Vector2.Zero, Color.White);

            spriteBatch.End();
            mandelbrot.CurrentTechnique.Passes[0].End();
            mandelbrot.End();

            base.Draw(gameTime);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course another reason besides art that I am interested in all this is that it can be helpful for random map generation in my project (which is still under way). I&amp;rsquo;ve made some improvements on that front, and I&amp;rsquo;ll post an update on it soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Still Hackin</title>
      <link>http://bsparks.github.io/2009/07/28/Still-Hackin/</link>
      <pubDate>Tue, 28 Jul 2009 09:01:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2009/07/28/Still-Hackin/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m still working on the &lt;a href=&#34;http://dungeonhack.sourceforge.net/Main_Page&#34; target=&#34;_blank&#34;&gt;DungeonHack&lt;/a&gt; project, and recently I&amp;rsquo;ve been given SVN commit access! Yay! This is the first open source project that I&amp;rsquo;ve ever officially been a part of. I&amp;rsquo;ve contributed several patches and actually feel like progress is being made which is always a plus. I&amp;rsquo;m glad that I&amp;rsquo;ve joined a team instead of trying to build a game by myself like I usually do.&lt;/p&gt;

&lt;p&gt;Right now I&amp;rsquo;m working on integrating Paged Geometry grass into the engine instead of the current. This way we can use a color map to mask the grass off the roads.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dungeon Hacking</title>
      <link>http://bsparks.github.io/2009/07/15/Dungeon-Hacking/</link>
      <pubDate>Wed, 15 Jul 2009 09:01:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2009/07/15/Dungeon-Hacking/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve joined the open source project &lt;a title=&#34;DungeonHack&#34; href=&#34;http://dungeonhack.sourceforge.net&#34; target=&#34;_blank&#34;&gt;DungeonHack&lt;/a&gt;, a FOSS game &amp;ldquo;Forged in the Spirit of Daggerfall&amp;rdquo;. Apparently at one time they planned to remake Daggerfall but are now just trying to make a modern 3D rpg game that has some of the best qualities of Daggerfall.&lt;/p&gt;

&lt;p&gt;It took me a bit to get it all compiled, but I was able to get it up and running. They are using Python for the scripting system. I&amp;rsquo;ve never used Python before, though I&amp;rsquo;ve heard of it and seen many projects choose to use it. I was really hoping to use Google&amp;rsquo;s V8 engine for a scripting engine, but I suppose it wouldn&amp;rsquo;t hurt to learn another language. The good thing is that since it&amp;rsquo;s all open source I can mess around with it any way I like. I may even work on integrating the V8 engine in there at some point. (either on my own or convince them to use it).&lt;/p&gt;

&lt;p&gt;My only concern with Python really is that I think that the end user has to install Python for the game to work. I suppose that isn&amp;rsquo;t really different from having to have .NET framework installed or Java or any of those, but I think that there is something that most professional games do not do. Most of the commercial titles that I play don&amp;rsquo;t need to install these, they usually have all their dependencies built in. Or maybe I just never noticed because I already had them installed.&lt;/p&gt;

&lt;p&gt;There are several other open source libraries that the system uses: Ogre3D for graphics, Bullet for physics, OpenAL for sound, myGUI for a UI, and PagedGeometry.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>