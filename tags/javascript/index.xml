<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Javascript on superior code </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://bsparks.github.io/tags/javascript/index.xml/</link>
    <language>en-us</language>
    <author>Ben Sparks</author>
    
    <updated>Wed, 18 Jul 2012 16:27:03 MST</updated>
    
    <item>
      <title>Doing stuff with node.js other than running a server</title>
      <link>http://bsparks.github.io/2012/07/18/Doing-stuff-with-node.js-other-than-running-a-server/</link>
      <pubDate>Wed, 18 Jul 2012 16:27:03 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2012/07/18/Doing-stuff-with-node.js-other-than-running-a-server/</guid>
      <description>

&lt;p&gt;Just about everybody who&amp;rsquo;s doing something with &lt;a href=&#34;http://nodejs.org/&#34;&gt;node.js&lt;/a&gt; is creating a server. In fact, node.js is often referred to
as a &amp;ldquo;server-side&amp;rdquo; javascript.  In fact here&amp;rsquo;s a great getting started tutorial on
&lt;a href=&#34;http://net.tutsplus.com/tutorials/javascript-ajax/learning-serverside-javascript-with-node-js/&#34;&gt;net.tuts+&lt;/a&gt;. That tutorial covers
a couple of things beyond the &amp;ldquo;hello world&amp;rdquo;, creating a simple HTTP server, and creating a live Twitter stream.
Anyway, I think that shows my point that most tutorials and things that people are going to do about node.js
involve either running a server or hooking up to some internet API. While I realize that today&amp;rsquo;s world is online,
and I certainly don&amp;rsquo;t think that it isn&amp;rsquo;t short of awesome to do these things, I think that doing some every day
offline tasks using javascript is &lt;em&gt;also&lt;/em&gt; awesome. So this will be the first article in possibly a
series of &amp;ldquo;Doing stuff with node.js other than running a server&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to start by going over some real world problems that I have actually run into at work, and how to solve them using node.js.&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;The Problem&lt;/h3&gt;

&lt;p&gt;The design team has created several icons of various sizes for use as teacher avatars throughout the site. Upon opening the teacher folder, I see there are several sub folders and it is clear that the icons are to be organized by the dimensions of the image. There are 29x29, 40x40, 85x85, and 112x112 size folders. Great, ok so I immediately think when I&amp;rsquo;m using them in the website, we can just store the name of the image, and then change folders to get the size depending on where we are in the site. I open the 29x29 folder and see images like &amp;ldquo;teacher_apple.jpg&amp;rdquo; and &amp;ldquo;teacher_male.jpg&amp;rdquo;, I open the 40x40 folder and see things like &amp;ldquo;apple_40x40.jpg&amp;rdquo; and &amp;ldquo;male_40x40.jpg&amp;rdquo;. Way to be consistent guys! Ok, so each folder has only about 14 images inside, and I could go through one by one and rename them, but as a programmer that sounds hideously boring and lame! So here we go, even if it takes longer to write a javascript program to do it for me, it&amp;rsquo;ll be more fun! Plus the next time they do it, I&amp;rsquo;ll be ready for them!&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;The Solution&lt;/h3&gt;

&lt;p&gt;Ok, so the first thing that you&amp;rsquo;re gonna want to do is have the node &lt;a href=&#34;http://nodejs.org/api/&#34;&gt;docs&lt;/a&gt; open, I can&amp;rsquo;t remember all the commands,
if you can, good for you ;) We want to make modifications to the file system, so we&amp;rsquo;ll be using commands from that library.
Also we&amp;rsquo;ll include the path library to make the file paths easier to work with. So first thing let&amp;rsquo;s just read one of the
folders contents and make sure we have that down. I&amp;rsquo;m creating a file called cleanup.js in the same folder as I have
the &amp;ldquo;teacher&amp;rdquo; images folder from the designers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var fs = require(&amp;quot;fs&amp;quot;),
    p = require(&amp;quot;path&amp;quot;);

var path = &amp;quot;teacher/40x40&amp;quot;;

fs.readdir(p.join(process.cwd(), path), function(err, files) {
    if(!err) {
        for(var i=0, len = files.length;i&amp;lt;len;i++) {
            console.log(files[i]);
        }
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the most part I think the docs should explain what all that does, so next let&amp;rsquo;s rename the files instead of just printing
them out. To see this in action simply type: &lt;strong&gt;node cleanup.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var fs = require(&amp;quot;fs&amp;quot;),
    p = require(&amp;quot;path&amp;quot;);

var path = &amp;quot;teacher/40x40&amp;quot;,
    folder = p.join(process.cwd(), path);

fs.readdir(folder, function(err, files) {
    if(!err) {
        for(var i=0, len = files.length;i&amp;lt;len;i++) {
            var original = files[i],
                modified = original.replace(&amp;quot;_40x40&amp;quot;, &amp;quot;&amp;quot;),
                callback = (function(o, m) { return function(err) {
                    if(!err) {
                        console.log(o + &amp;quot; --&amp;gt; &amp;quot; + m);
                    } else {
                        console.log(&amp;quot;error&amp;quot;, err);
                    }
                }; }(original, modified));

            fs.rename(p.join(folder, original), p.join(folder, modified), callback);
        }
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, great so that works. I&amp;rsquo;ve already realized that hard coding the path in there isn&amp;rsquo;t going to be useful for long.
At the very least, each folder I want to run this on I have to change the path, and change the string that I want to
replace. Instead it&amp;rsquo;d be cool if I could take in parameters from the command line. While you can do this with just
the built in libraries, I happen to know and love another helper library for this
called &lt;a href=&#34;https://github.com/visionmedia/commander.js/&#34;&gt;Commander&lt;/a&gt;. If you don&amp;rsquo;t already know how to use NPM to install
packages, you&amp;rsquo;ll want to read up on that, but for now, just type: &lt;strong&gt;&lt;em&gt;npm install commander&lt;/em&gt;&lt;/strong&gt; in the same folder as the
script. Commander lets you specify option flags as well as commands and comes with built in help. So now we&amp;rsquo;ll modify the program to
be a little more useful.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var fs = require(&amp;quot;fs&amp;quot;),
    p = require(&amp;quot;path&amp;quot;),
    app = require(&amp;quot;commander&amp;quot;);

function renameX(folder, find, replaceWith) {
    var flags, pattern, regex;

    // change to the defined cwd
    process.chdir(app.cwd);

    // default to empty string for optional replacement
    if(!replaceWith) {
        replaceWith = &amp;quot;&amp;quot;;
    }

    // regex from string credit to &amp;quot;Anonymous&amp;quot; http://stackoverflow.com/a/874742
    if(find[0] === &#39;/&#39;) {
        flags = find.replace(/.*\/([gimy]*)$/, &#39;$1&#39;);
        pattern = find.replace(new RegExp(&#39;^/(.*?)/&#39;+flags+&#39;$&#39;), &#39;$1&#39;);
        regex = new RegExp(pattern, flags);
    } else {
        regex = find; // just simple string
    }

    fs.readdir(folder, function(err, files) {
        if(!err) {
            for(var i=0, len = files.length;i&amp;lt;len;i++) {
                var original = files[i],
                    modified = original.replace(regex, replaceWith),
                    callback = (function(o, m) { return function(err) {
                        if(!err) {
                            console.log(o + &amp;quot; --&amp;gt; &amp;quot; + m);
                        } else {
                            console.log(&amp;quot;error&amp;quot;, err);
                        }
                    }; }(original, modified));

                fs.rename(p.join(folder, original), p.join(folder, modified), callback);
            }
        }
    });
}

// optionally allow us to run from another starting point
app.option(&amp;quot;-w, --cwd [dir]&amp;quot;, &amp;quot;set the working path&amp;quot;, process.cwd());

// setup the main renaming command
app
    .command(&amp;quot;rx &amp;lt;folder&amp;gt; &amp;lt;find&amp;gt; [replaceWith]&amp;quot;)
    .description(&amp;quot;rename all files in a folder using a regex replace&amp;quot;)
    .action(renameX);

// parse the arguments and follow through
app.parse(process.argv);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I wrapped the original logic inside a function, the params of the function determine what to do. The arguments passed into Commander&amp;rsquo;s syntax are what gets passed into the function. The &amp;lt;&amp;gt; means required, and the [] is optional. I also created one option so that it can be executed in the context of another directory. That too is optional, and the final argument in that is the default (process.cwd()). So now we can type: &lt;strong&gt;node cleanup.js rx &amp;ldquo;./teacher/40x40&amp;rdquo; &amp;ldquo;_40x40&amp;rdquo;&lt;/strong&gt; ; I&amp;rsquo;ve left off the final argument &lt;strong&gt;replaceWith&lt;/strong&gt; because it&amp;rsquo;s optional, and I&amp;rsquo;ve defaulted it to &amp;ldquo;&amp;rdquo; in the function. This should give you output something like this, depending on your filenames.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
C:\Users\Ben\Documents\node\useful things&amp;gt;node cleanup.js rx &amp;quot;./teacher/40x40&amp;quot; &amp;quot;_40x40&amp;quot;

apple_40x40.jpg --&amp;gt; apple.jpg
arrow_40x40.jpg --&amp;gt; arrow.jpg
greenstar_40x40.jpg --&amp;gt; greenstar.jpg
fire_40x40.jpg --&amp;gt; fire.jpg
earth_40x40.jpg --&amp;gt; earth.jpg
mountain_40x40.jpg --&amp;gt; mountain.jpg
brain_40x40.jpg --&amp;gt; brain.jpg
stones_40x40.jpg --&amp;gt; stones.jpg
teacher_female_icon_40x40.png --&amp;gt; teacher_female_icon.png
polarbear_40x40.jpg --&amp;gt; polarbear.jpg
moon_40x40.jpg --&amp;gt; moon.jpg
water_40x40.jpg --&amp;gt; water.jpg
teacher_male_icon_40x40.png --&amp;gt; teacher_male_icon.png
umbrella_40x40.jpg --&amp;gt; umbrella.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So there we go, mission accomplished, it didn&amp;rsquo;t take too much longer than manually renaming them. But just think, if there had been
 100 images in each folder, how much of a pain in the ass would that have been? Now we can just run the command on each folder,
  and bulk cleanup the files.
As I&amp;rsquo;m finishing this up I can think of a few things that still need hammering out, but I&amp;rsquo;ll save them for later.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fs.readdir returns an array of files, technically even folders are also files, so they&amp;rsquo;d be affected by the rename as well&lt;/li&gt;
&lt;li&gt;we should create a package.json file so that npm can install our dependencies for us&lt;/li&gt;
&lt;li&gt;consider installing it globally using the &amp;ldquo;bin&amp;rdquo; option so that we can just call &amp;ldquo;cleanup&amp;rdquo; from anywhere without having to
call node or have the js file in the path&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There could be other things I haven&amp;rsquo;t thought of, bugs, tests, who knows. It is only a quick utility script after all.
If anyone has any suggestions leave a comment!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mine Mars</title>
      <link>http://bsparks.github.io/2012/04/12/Mine-Mars/</link>
      <pubDate>Thu, 12 Apr 2012 08:40:00 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2012/04/12/Mine-Mars/</guid>
      <description>&lt;p&gt;My friend John has been working on a WebGL game for some time now, and he&amp;rsquo;s decided to do a kickstarter for it. I&amp;rsquo;ve contributed a few bits of code and a dash of inspiration to this project. Check it out!&lt;/p&gt;

&lt;iframe src=&#34;http://www.kickstarter.com/projects/1355251822/mine-mars-a-voxel-based-javascript-webgl-adventure/widget/video.html&#34; frameborder=&#34;0&#34; width=&#34;480px&#34; height=&#34;360px&#34;&gt;&lt;/iframe&gt;
&lt;iframe src=&#34;http://www.kickstarter.com/projects/1355251822/mine-mars-a-voxel-based-javascript-webgl-adventure/widget/card.html&#34; frameborder=&#34;0&#34; width=&#34;220px&#34; height=&#34;380px&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Jquery Conference</title>
      <link>http://bsparks.github.io/2011/05/05/Jquery-Conference/</link>
      <pubDate>Thu, 05 May 2011 09:01:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2011/05/05/Jquery-Conference/</guid>
      <description>&lt;p&gt;I went to the &lt;a title=&#34;jQuery&#34; href=&#34;http://jquery.com&#34; target=&#34;_blank&#34;&gt;jQuery&lt;/a&gt; &lt;a title=&#34;Conference&#34; href=&#34;http://events.jquery.org/2011/sf-bay-area/&#34; target=&#34;_blank&#34;&gt;Conference&lt;/a&gt; in Mountain View, CA a little while ago. It was a great experience, and I think that I learned quite a bit. When I got back, I gave a short presentation at work on some of the highlights. Here are my &lt;a title=&#34;slides&#34; href=&#34;http://superiorcode.com/jqcon&#34; target=&#34;_blank&#34;&gt;slides&lt;/a&gt; that I used for anyone who is interested. Thanks goes to &lt;a title=&#34;Adam J Sontag&#34; href=&#34;http://twitter.com/#!/ajpiano&#34; target=&#34;_blank&#34;&gt;@ajpiano&lt;/a&gt; for the base template.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Voxel Game</title>
      <link>http://bsparks.github.io/2011/02/15/Voxel-Game/</link>
      <pubDate>Tue, 15 Feb 2011 09:01:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2011/02/15/Voxel-Game/</guid>
      <description>&lt;p&gt;Well, I have been interested in Voxels and Volumetric rendering for quite some time. I have also been following the game &lt;a title=&#34;Minecraft&#34; href=&#34;http://minecraft.net&#34; target=&#34;_blank&#34;&gt;Minecraft&lt;/a&gt; for a very long time. Well, I decided to start working on my own block engine finally. It took quite a bit of research but I finally understand how it&amp;rsquo;s done (well most of it). So now a couple of friends of mine and I are working on creating a version for the Xbox 360.
&lt;p style=&#34;text-align: center;&#34;&gt;Here are some screenshots:
&lt;a href=&#34;http://superiorcode.com/blog/wp-content/uploads/2011/02/colors.jpg&#34;&gt;&lt;img class=&#34;aligncenter size-large wp-image-184&#34; title=&#34;Colored Lights&#34; src=&#34;http://superiorcode.com/blog/wp-content/uploads/2011/02/colors-1024x577.jpg&#34; alt=&#34;&#34; width=&#34;600&#34; height=&#34;338&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;http://superiorcode.com/blog/wp-content/uploads/2011/02/sweet.jpg&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-183&#34; title=&#34;Block Game&#34; src=&#34;http://superiorcode.com/blog/wp-content/uploads/2011/02/sweet.jpg&#34; alt=&#34;&#34; width=&#34;854&#34; height=&#34;482&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Another late entry</title>
      <link>http://bsparks.github.io/2009/07/08/Another-late-entry/</link>
      <pubDate>Wed, 08 Jul 2009 09:01:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2009/07/08/Another-late-entry/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;ve become obsessed with Javascript. The more I use it the more I like it. I&amp;rsquo;ve started using the &lt;a title=&#34;ExtJS&#34; href=&#34;http://www.extjs.com&#34; target=&#34;_blank&#34;&gt;ExtJS &lt;/a&gt;framework at work in building the CRM system.&lt;/p&gt;

&lt;p&gt;On the games front, I&amp;rsquo;ve been working on writing a wrapper for &lt;a href=&#34;http://gdk.thegamecreators.com/&#34; target=&#34;_blank&#34;&gt;DarkGDK&lt;/a&gt; for the &lt;a href=&#34;http://code.google.com/p/v8/&#34; target=&#34;_blank&#34;&gt;V8&lt;/a&gt; Javascript engine. I&amp;rsquo;ve almost got all of the commands for it wrapped, then I plan to release it as a free community experiment on the community.&lt;/p&gt;

&lt;p&gt;I also started to look more into &lt;a href=&#34;http://www.ogre3d.org/&#34; target=&#34;_blank&#34;&gt;Ogre3d &lt;/a&gt;for the engine instead of DarkGDK. It has always bothered me that DarkGDK isn&amp;rsquo;t Object Oriented. Of course everything has it&amp;rsquo;s ups and downs, DarkGDK has libraries for many different aspects of a game engine (sound, networking, input, etc.) where Ogre3d is just the rendering engine. There are tons of plugins and extensions however to getting those extra libraries working with Ogre.&lt;/p&gt;

&lt;p&gt;One really cool thing that I found while looking around at Ogre is &lt;a href=&#34;http://princeofcode.com/awesomium.php&#34; target=&#34;_blank&#34;&gt;Awesomium&lt;/a&gt; which is taking the Chromium sdk and combining that with the Ogre engine to have browsing inside a 3d environment. I suppose when it comes down to it, it isn&amp;rsquo;t super useful application wise for things to be in 3D, but as their suggestions with games it makes sense. Having web ads on virtual billboards in game is neat. Paying for the games&amp;rsquo; production with in game advertising isn&amp;rsquo;t a new concept, but I don&amp;rsquo;t think there have been many advances prior with it. Beyond that I also always liked that EverQuest 2 had an in-game browser (although it was UI only), having in-game browsing in an MMO seems almost necessary today. What really excites me is just the possibility of creating UI elements using HTML and Javascript. I think having a game or other 3D application that can load up a website and be controlled by that website is very interesting. I also think (which one of my ideas with my V8 wrapper) that loading up some games purely by remotely loading some Javascript file is awesome. If you could merge the website and the game so that people outside the client could have some effect on people inside the 3d client that would be cool too. First step though would be a Javascript arcade. Post the simple text file to the website or use a web interface to configure a database, save the script, then have the client load it up remotely with JSON data.&lt;/p&gt;

&lt;p&gt;I realize that the above is a sort of broken thought, but whatever, it&amp;rsquo;s my blog :P&lt;/p&gt;

&lt;p&gt;Check out this video of the NaviLibrary which uses the Awesomium to do the whole 3D browsing, it&amp;rsquo;s pretty cool.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/jbkEmWw9krc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Why didn&#39;t I already know about this?</title>
      <link>http://bsparks.github.io/2009/01/06/Why-didnt-I-already-know-about-this/</link>
      <pubDate>Tue, 06 Jan 2009 00:01:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2009/01/06/Why-didnt-I-already-know-about-this/</guid>
      <description>&lt;p&gt;Ok, apparently I am way behind the times. Maybe it&amp;rsquo;s the nature of my work (I&amp;rsquo;ll go into that someday) or I dunno what, but all of a sudden I feel like I know next to nothing about what&amp;rsquo;s going on in the web development world.&lt;/p&gt;

&lt;p&gt;First, if you&amp;rsquo;re like me and somehow crawling out from the rock you&amp;rsquo;ve been living under for who knows how long let me list off a few things that I think I should have known:
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/HTML5&#34; target=&#34;_blank&#34;&gt;HTML5&lt;/a&gt; has been in development since 2007&lt;/li&gt;
    &lt;li&gt;Javascript = Ajax = Javascript + HTML = Web 2.0&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://json.org&#34; target=&#34;_blank&#34;&gt;JSON&lt;/a&gt; is very popular and seems faster, easier, and just better than XML&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/En/HTML:Canvas&#34; target=&#34;_blank&#34;&gt;Canvas &lt;/a&gt;lets you draw with javascript!&lt;/li&gt;
&lt;/ul&gt;
I&amp;rsquo;m sure there is more for the list of things that I didnt really know but think I should have. &lt;a href=&#34;http://en.wikipedia.org/wiki/HTML5&#34; target=&#34;_blank&#34;&gt;HTML 5&lt;/a&gt; specification apparently is going to have all sorts of interesting things, the first draft was submitted (according to wikipedia) in January of 2008. I always thought that Ajax stood for Asyncrhonous Javascript And Xml, and really was describing primarily the use of XmlHttpObject to transmit data without having to refresh the page. But apparently it doesn&amp;rsquo;t really mean anything, it&amp;rsquo;s basically how the web is developed now. &lt;a href=&#34;http://json.org&#34; target=&#34;_blank&#34;&gt;JSON&lt;/a&gt; I had heard about, at least the name, but for whatever reason chose to dismiss it and not even look into what it was. Now that I have I have to say it seems easier to work with and shrinks the size of &amp;ldquo;messages&amp;rdquo; about half the size of xml (because you dont have all the tags and attribute extras). There was a huge debate (is it still going on?) but I think that was probably over with in 2006 or early 2007.&lt;/p&gt;

&lt;p&gt;I suppose I feel like I should have not dared ever call my self a web developer. Before this holiday weekend, I never used any RSS readers or had any subscriptions to the news. I did search for technology stuff, read blogs, things like that, but it was almost always for a specific thing (working on .NET looking for tutorials on how to do something). The only websites that I ever worked on were for work. I guess this will be my New Year&amp;rsquo;s resolution. I&amp;rsquo;m going to do my best this year and going forward to get up to speed with the Web (Ben 2.0).&lt;/p&gt;

&lt;p&gt;Also, I&amp;rsquo;m not really sure yet what the Blog protocol is, should I post once a day and just cram everything into one post, or should I post once for each major topic. It seems to me that having topics would make things easier to search for, if I have a 100 posts a day so be it, so that&amp;rsquo;s what I&amp;rsquo;ll do&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://bsparks.github.io/2009/01/05/Hello-World/</link>
      <pubDate>Mon, 05 Jan 2009 08:01:44 MST</pubDate>
      <author>Ben Sparks</author>
      <guid>http://bsparks.github.io/2009/01/05/Hello-World/</guid>
      <description>&lt;p&gt;Well, finally setup a blog. Wordpress seems to be pretty much the standard. Looks nice.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure on the theme though.&lt;/p&gt;

&lt;p&gt;So, in this blog I plan to note interesting things (to me).  Recently I&amp;rsquo;ve been very heavy into Javascript research, mostly because of YUI and Chrome. I got sick and tired of my work website not working in anything but IE. Even though I&amp;rsquo;m behind the times, I figure it&amp;rsquo;s never too late to catch up. So I&amp;rsquo;ve been reading up a lot on Javascript techniques, YUI, Google Gears, and other nifty stuff.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m planning to write a web rpg at some point, problem is I can&amp;rsquo;t decide on the server technology to use. (Already pretty set on YUI for my main js lib). It&amp;rsquo;s either going to be classic ASP (I have tons of exp in this), Asp.Net (have medium exp in this) or PHP (for some reason I fight this one).&lt;/p&gt;

&lt;p&gt;Anyway, I was thinking of doing a Roguelike, only a PBBG and maybe even MMO-ish. I found a javascript tile map engine that uses JQuery called gTile. I took a look at it, and while it does seem to run OK, it looks to me that it is far from optimised. For instance each tile loads an image, even if it&amp;rsquo;s the same image that is previously loaded. So I was thinking of making a tile engine using CSS Sprites. What I don&amp;rsquo;t know though is whether or not it&amp;rsquo;ll be better to do a map that only renders the visible tiles, or render the whole thing and scroll the div. I&amp;rsquo;m guessing the lower rendering amount, and just change the sprite background position on the fly. Then the actual map data would be kept track of by the js engine. I&amp;rsquo;ll have to try it out I guess, just get a simple panel with map cells that I can &amp;ldquo;pretend&amp;rdquo; to scroll. If that works, then simply have 2 or 3 layers of the same thing on top for some depth sorting. Makes me wonder, if &lt;em&gt;that&lt;/em&gt; was fast, then could one in theory come up with a 3D engine? I&amp;rsquo;m sure someone has done 3D in js before&amp;hellip;&lt;/p&gt;

&lt;p&gt;Hmm&amp;hellip;. this is my first real blog, I bet I&amp;rsquo;ll have to go back and setup links for all those words up there :) If anyone manages to read this thing, HI! :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>